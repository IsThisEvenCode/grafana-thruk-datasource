{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","ThrukDatasource","instanceSettings","$q","backendSrv","templateSrv","q","url","withCredentials","basicAuth","requestOptions","_requestOptions","method","datasourceRequest","then","response","status","message","title","options","query","_parseQuery","_replaceVariables","annotation","range","scopedVars","path","table","replace","columns","Error","params","where","map","result","data","d","i","catch","_handleQueryError","bind","encodeURIComponent","text","Object","values","join","value","This","x","targets","length","target","hasColumns","when","shift","forEach","_addColumn","col","condition","limit","keys","row","type","push","rows","match","addColumn","headers","Authorization","tmp","str","s","angular","isArray","escaped","escapeRegExp","v","matches","field","timefilter","Math","floor","from","toDate","getTime","to","groups","segments","split","err","console","log","code","error","description","statusText"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class ThrukDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.url = instanceSettings.url;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n  }\n\n  // testDatasource is used on the datasource options page\n  testDatasource() {\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/',\n      method: 'GET'\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(response => {\n        if (response.status === 200) {\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n      });\n  }\n\n  // annotationQuery returns annotations\n  annotationQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options.annotation.query, options.range, options.scopedVars));\n    var path = query.table.replace(/^\\//, '');\n    if(query.columns[0] != \"time\") {\n      throw new Error(\"query syntax error, first column must be 'time' for annotations.\");\n    }\n    var params = {\n      columns: query.columns\n    };\n    params.q = query.where;\n\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n      params: params,\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return {\n            \"annotation\": options.annotation,\n            \"title\": d['type'],\n            \"time\": d['time']*1000,\n            \"text\": d['message'].replace(/^\\[\\d+\\]\\s+/, '').replace(/^[^:]+:\\s+/, ''),\n            \"tags\": d['type'],\n          };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // metricFindQuery gets called from variables page\n  metricFindQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options));\n    var path = query.table+\"?columns=\"+query.columns;\n    path = path.replace(/^\\//, '');\n    if(query.where) {\n      path += '&q='+encodeURIComponent(query.where)\n    }\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return { text: Object.values(d).join(';'), value: Object.values(d).join(';') };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // query gets called from table panels\n  query(options) {\n    var This = this;\n    // we can only handle a single query right now\n    for(var x=0; x<options.targets.length; x++) {\n      var table = new TableModel();\n      var target = options.targets[x];\n      var path = target.table\n      var hasColumns = false;\n      var params = {};\n\n      if(!path) {\n        return(This.$q.when([]));\n      }\n      path = path.replace(/^\\//, '');\n      path = this._replaceVariables(path, options.range, options.scopedVars);\n\n      if(!target.columns) { target.columns = []; }\n      if(target.columns[0] == '*') {\n        target.columns.shift();\n      }\n      if(target.columns.length > 0) {\n        params.columns = target.columns.join(',');\n        target.columns.forEach(col => {\n          This._addColumn(table, col);\n        });\n        hasColumns = true;\n      }\n      if(target.condition) {\n        params.q = this._replaceVariables(target.condition, options.range, options.scopedVars);\n      }\n      if(target.limit) {\n        params.limit = target.limit;\n      }\n      var requestOptions = This._requestOptions({\n        url: This.url + '/r/v1/'+path,\n        method: 'GET',\n        params: params,\n      });\n      return This.backendSrv.datasourceRequest(requestOptions).then(function(result) {\n        // extract columns from first result row unless specified\n        if(!hasColumns && result.data[0]) {\n          Object.keys(result.data[0]).forEach(col => {\n            This._addColumn(table, col);\n          });\n        }\n        // add data rows\n        _.map(result.data, (d, i) => {\n          var row = [];\n          table.columns.forEach(col => {\n            if(col.type == \"time\") {\n              row.push(d[col.text] * 1000);\n            } else {\n              row.push(d[col.text]);\n            }\n          });\n          table.rows.push(row);\n        });\n        return({\n          data: [\n            table\n          ]\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n    }\n  }\n\n  _addColumn(table, col) {\n    if(col.match(/^(last_|next_|time)/)) {\n      table.addColumn({ text: col, type: 'time' });\n    } else {\n      table.addColumn({ text: col });\n    }\n  }\n\n  _requestOptions(options) {\n    options = options || {};\n    options.headers = options.headers || {};\n    if(this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if(this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n    return(options);\n  }\n\n  _parseQuery(query) {\n    var tmp = query.match(/^\\s*SELECT\\s+([\\w_,\\ ]+)\\s+FROM\\s+([\\w_\\/]+)(|\\s+WHERE\\s+(.*))(|\\s+LIMIT\\s+(\\d+))$/i);\n    if(!tmp) {\n      throw new Error(\"query syntax error, expecting: SELECT <column>[,<columns>] FROM <rest url> [WHERE <filter conditions>] [LIMIT <limi>]\");\n    }\n    return({\n      columns: tmp[1].replace(/\\s+/g, ''),\n      table:   tmp[2],\n      where:   tmp[4],\n      limit:   tmp[6],\n    });\n  }\n\n  _replaceVariables(str, range, scopedVars) {\n    str = this.templateSrv.replace(str, scopedVars, function(s) {\n      if(s && angular.isArray(s)) {\n        var escaped = [];\n        s.forEach(v => {\n          escaped.push(_.escapeRegExp(v));\n        });\n        return(\"^(\"+escaped.join('|')+')$');\n      }\n      return(s);\n    });\n    // replace time filter\n    if(range) {\n      var matches = str.match(/(\\w+)\\s*=\\s*\\$time/);\n      if(matches && matches[1]) {\n        var field = matches[1];\n        var timefilter = \"(\"+field+ \" > \"+Math.floor(range.from.toDate().getTime()/1000);\n        timefilter    += \" AND \"+field+\" < \"+Math.floor(range.to.toDate().getTime()/1000);\n        timefilter    += \")\";\n        str = str.replace(matches[0], timefilter);\n      }\n    }\n\n    // fixup list regex filters\n    var matches = str.match(/([\\w_]+)\\s*>=\\s*\"\\^\\((.*?)\\)\\$\"/);\n    while(matches) {\n        var groups = [];\n        var segments = matches[2].split('|');\n        segments.forEach(s => {\n          groups.push(matches[1]+' >= \"'+s+'\"');\n        })\n        str = str.replace(matches[0], '('+groups.join(' OR ')+')');\n        matches = str.match(/([\\w_]+)\\s*>=\\s*\"\\^\\((.*?)\\)\\$\"/);\n    }\n\n    return(str);\n  }\n\n  _handleQueryError(err) {\n    console.log(err);\n    if(err.data && err.data.code && err.data.code > 400) {\n      var error = \"query error: \"+err.data.message;\n      if(err.data.description) {\n        error += \" - \"+err.data.description;\n      }\n      throw new Error(error);\n    }\n    if(err.status && err.status > 400) {\n      throw new Error(\"query error: \"+err.status+\" - \"+err.statusText);\n    }\n    throw new Error(err);\n    return [];\n  }\n}\n"]}