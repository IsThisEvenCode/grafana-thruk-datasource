{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","ThrukDatasource","instanceSettings","$q","backendSrv","templateSrv","q","url","withCredentials","basicAuth","requestOptions","_requestOptions","method","datasourceRequest","then","response","status","data","rest_version","message","title","match","statusText","catch","err","options","query","_parseQuery","_replaceVariables","annotation","range","scopedVars","path","table","replace","columns","split","Error","params","where","map","result","d","i","_handleQueryError","bind","encodeURIComponent","text","Object","values","join","value","This","x","targets","length","target","hasColumns","when","shift","forEach","_addColumn","col","condition","limit","keys","row","type","push","rows","addColumn","headers","Authorization","tmp","str","s","angular","isArray","matches","field","timefilter","Math","floor","from","toDate","getTime","to","regex","RegExp","groups","segments","console","log","code","error","description"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class ThrukDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.url = instanceSettings.url;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n  }\n\n  // testDatasource is used on the datasource options page\n  testDatasource() {\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/thruk?columns=rest_version',\n      method: 'GET'\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(response => {\n        if(response.status === 200 && response.data && response.data.rest_version === 1) {\n          return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n        }\n        if(response.status === 200 && response.data && response.data.match(/login\\.cgi/)) {\n          return { status: 'error', message: 'Data source connected, but no valid data received. Verify authorization.' };\n        }\n        return { status: 'error', message: response.status+\" \"+response.statusText };\n      })\n      .catch(err => {\n        if(err.status && err.status >= 400) {\n          return { status: 'error', message: 'Data source not connected: '+err.status+' '+err.statusText };\n        }\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  // annotationQuery returns annotations\n  annotationQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options.annotation.query, options.range, options.scopedVars));\n    var path = query.table.replace(/^\\//, '');\n    if(query.columns.split(/\\s*,\\s*/)[0] != \"time\") {\n      throw new Error(\"query syntax error, first column must be 'time' for annotations.\");\n    }\n    var params = {\n      columns: query.columns\n    };\n    params.q = query.where;\n\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n      params: params,\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return {\n            \"annotation\": options.annotation,\n            \"title\": d['type'],\n            \"time\": d['time']*1000,\n            \"text\": d['message'].replace(/^\\[\\d+\\]\\s+/, '').replace(/^[^:]+:\\s+/, ''),\n            \"tags\": d['type'],\n          };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // metricFindQuery gets called from variables page\n  metricFindQuery(options) {\n    var query = this._parseQuery(this._replaceVariables(options));\n    var path = query.table+\"?columns=\"+query.columns;\n    path = path.replace(/^\\//, '');\n    if(query.where) {\n      path += '&q='+encodeURIComponent(query.where)\n    }\n    var requestOptions = this._requestOptions({\n      url: this.url + '/r/v1/'+path,\n      method: 'GET',\n    });\n    return this.backendSrv.datasourceRequest(requestOptions)\n      .then(result => {\n        return _.map(result.data, (d, i) => {\n          return { text: Object.values(d).join(';'), value: Object.values(d).join(';') };\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n  }\n\n  // query gets called from table panels\n  query(options) {\n    var This = this;\n    // we can only handle a single query right now\n    for(var x=0; x<options.targets.length; x++) {\n      var table = new TableModel();\n      var target = options.targets[x];\n      var path = target.table\n      var hasColumns = false;\n      var params = {};\n\n      if(!path) {\n        return(This.q.when([]));\n      }\n      path = path.replace(/^\\//, '');\n      path = this._replaceVariables(path, options.range, options.scopedVars);\n\n      if(!target.columns) { target.columns = []; }\n      if(target.columns[0] == '*') {\n        target.columns.shift();\n      }\n      if(target.columns.length > 0) {\n        params.columns = target.columns.join(',');\n        target.columns.forEach(col => {\n          This._addColumn(table, col);\n        });\n        hasColumns = true;\n      }\n      if(target.condition) {\n        params.q = this._replaceVariables(target.condition, options.range, options.scopedVars);\n      }\n      if(target.limit) {\n        params.limit = target.limit;\n      }\n      var requestOptions = This._requestOptions({\n        url: This.url + '/r/v1/'+path,\n        method: 'GET',\n        params: params,\n      });\n      return This.backendSrv.datasourceRequest(requestOptions).then(function(result) {\n        // extract columns from first result row unless specified\n        if(!hasColumns && result.data[0]) {\n          Object.keys(result.data[0]).forEach(col => {\n            This._addColumn(table, col);\n          });\n        }\n        // add data rows\n        _.map(result.data, (d, i) => {\n          var row = [];\n          table.columns.forEach(col => {\n            if(col.type == \"time\") {\n              row.push(d[col.text] * 1000);\n            } else {\n              row.push(d[col.text]);\n            }\n          });\n          table.rows.push(row);\n        });\n        return({\n          data: [\n            table\n          ]\n        });\n      })\n      .catch(this._handleQueryError.bind(this));\n    }\n  }\n\n  _addColumn(table, col) {\n    if(col.match(/^(last_|next_|time)/)) {\n      table.addColumn({ text: col, type: 'time' });\n    } else {\n      table.addColumn({ text: col });\n    }\n  }\n\n  _requestOptions(options) {\n    options = options || {};\n    options.headers = options.headers || {};\n    if(this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if(this.basicAuth) {\n      options.headers.Authorization = this.basicAuth;\n    }\n    options.headers['Content-Type'] = 'application/json';\n    return(options);\n  }\n\n  _parseQuery(query) {\n    var tmp = query.match(/^\\s*SELECT\\s+([\\w_,\\ ]+)\\s+FROM\\s+([\\w_\\/]+)(|\\s+WHERE\\s+(.*))(|\\s+LIMIT\\s+(\\d+))$/i);\n    if(!tmp) {\n      throw new Error(\"query syntax error, expecting: SELECT <column>[,<columns>] FROM <rest url> [WHERE <filter conditions>] [LIMIT <limi>]\");\n    }\n    return({\n      columns: tmp[1].replace(/\\s+/g, ''),\n      table:   tmp[2],\n      where:   tmp[4],\n      limit:   tmp[6],\n    });\n  }\n\n  _replaceVariables(str, range, scopedVars) {\n    str = this.templateSrv.replace(str, scopedVars, function(s) {\n      if(s && angular.isArray(s)) {\n        return(\"^(\"+s.join('|')+')$');\n      }\n      return(s);\n    });\n\n    // replace time filter\n    if(range) {\n      var matches = str.match(/(\\w+)\\s*=\\s*\\$time/);\n      if(matches && matches[1]) {\n        var field = matches[1];\n        var timefilter = \"(\"+field+ \" > \"+Math.floor(range.from.toDate().getTime()/1000);\n        timefilter    += \" AND \"+field+\" < \"+Math.floor(range.to.toDate().getTime()/1000);\n        timefilter    += \")\";\n        str = str.replace(matches[0], timefilter);\n      }\n    }\n\n    // fixup list regex filters\n    var regex   = new RegExp(/([\\w_]+)\\s*(>=|=)\\s*\"\\^\\((.*?)\\)\\$\"/);\n    var matches = str.match(regex);\n    while(matches) {\n        var groups = [];\n        var segments = matches[3].split('|');\n        segments.forEach(s => {\n          groups.push(matches[1]+' '+matches[2]+' \"'+s+'\"');\n        })\n        str = str.replace(matches[0], '('+groups.join(' OR ')+')');\n        matches = str.match(regex);\n    }\n\n    return(str);\n  }\n\n  _handleQueryError(err) {\n    console.log(err);\n    if(err.data && err.data.code && err.data.code >= 400) {\n      var error = \"query error: \"+err.data.message;\n      if(err.data.description) {\n        error += \" - \"+err.data.description;\n      }\n      throw new Error(error);\n    }\n    if(err.status && err.status > 400) {\n      throw new Error(\"query error: \"+err.status+\" - \"+err.statusText);\n    }\n    throw new Error(err);\n    return [];\n  }\n}\n"]}