{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","ThrukDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","table","columns","condition","setColSegments","requestOptions","datasource","_requestOptions","url","method","headers","backendSrv","datasourceRequest","then","_","map","result","data","d","i","text","value","transformToSegments","catch","handleQueryError","bind","push","Object","keys","forEach","key","col","index","splice","onChangeInternal","colSegments","angular","isArray","split","newSegment","length","newPlusButton","panelCtrl","refresh","query","join","limit","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class ThrukDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv     = uiSegmentSrv;\n    this.target.table     = this.target.table     || '/';\n    this.target.columns   = this.target.columns   || ['*'];\n    this.target.condition = this.target.condition || '';\n\n    this.setColSegments();\n  }\n\n  getTables() {\n    var requestOptions = this.datasource._requestOptions({\n      url: this.datasource.url + '/r/v1/index?columns=url&protocol=get',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    return this.datasource.backendSrv.datasourceRequest(requestOptions)\n      .then(result => _.map(result.data, (d, i) => {\n        return { text: d.url, value: d.url };\n      }))\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.datasource.handleQueryError.bind(this));\n  }\n\n  getColumns() {\n    var requestOptions = this.datasource._requestOptions({\n      url: this.datasource.url + '/r/v1/'+this.target.table+'?limit=1',\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n    return this.datasource.backendSrv.datasourceRequest(requestOptions)\n      .then(function(result) {\n        var data = [];\n        data.push({ text: '-- remove --', value: '-- remove --' });\n        if(result.data[0]) {\n          Object.keys(result.data[0]).forEach(function(key) {\n            data.push({ text: key, value: key });\n          });\n        }\n        return(data);\n      })\n      .then(this.uiSegmentSrv.transformToSegments(false))\n      .catch(this.datasource.handleQueryError.bind(this));\n  }\n\n  tagSegmentUpdated(col,index) {\n    this.target.columns[index] = col.value;\n    if(col.value == \"-- remove --\") {\n      this.target.columns.splice(index, 1);\n    }\n    this.setColSegments();\n    this.onChangeInternal();\n    return;\n  }\n\n  setColSegments() {\n    this.colSegments = [];\n    if(!angular.isArray(this.target.columns)) {\n      if(!this.target.columns) {\n        this.target.columns = ['*'];\n      } else {\n        this.target.columns = this.target.columns.split(\"\\s*,\\s*\");\n      }\n    }\n    this.target.columns.forEach(col => {\n      this.colSegments.push(this.uiSegmentSrv.newSegment({ value: col }));\n    });\n    if(this.colSegments.length == 0) {\n      this.colSegments.push(this.uiSegmentSrv.newSegment({ value: '*' }));\n    }\n    this.colSegments.push(this.uiSegmentSrv.newPlusButton());\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh();\n  }\n\n  getCollapsedText() {\n    var query = 'SELECT '+this.target.columns.join(',')\n               +' FROM '+this.target.table;\n    if(this.target.condition) {\n      query +=  ' WHERE '+this.target.condition\n    }\n    if(this.target.limit) {\n      query +=  ' LIMIT '+this.target.limit\n    }\n    return(query);\n  }\n}\n\nThrukDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}